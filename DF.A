         MACRO
&FLAG    DF    &MASK,&BASE,&BAD        DEFINE FLAG BIT(s)
         AIF   (T'&BAD EQ 'O').GOOD
         MNOTE 12,'TOO MANY OPERANDS SPECIFIED, BAD=&BAD'
         MEXIT
.GOOD    AIF   (T'&MASK NE 'O').BEGIN
         MNOTE 12,'BIT MASK IS MISSING'
         MEXIT
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
.* This macro is for defining the  bit masks (flags) to use with the *
.* TF (Test Flag),  SF (Set Flag), and CF (Clear Flag) macros.   You *
.* define the flag  byte,  itself,  immediately  prior to using this *
.* macro.   Note that, in this scenario, the flag byte does not have *
.* to have its own name -- that is up to you.                        *
.*                                                                   *
.* As presented by the late Dr. John Ehrman of IBM at SHARE.         *
.*                                                                   *
.* The idea is,  you  can  have  a  setup  similar  to either of the *
.* following two examples.  The generated bit masks are then equated *
.* to the location of the flag  byte  and the length of the bit mask *
.* is set to the  value  of  the bit mask,  itself (normal assembler *
.* rules apply to the coding of the bit mask).  The macros mentioned *
.* will take advantage of this arrangement.                          *
.*                                                                   *
.*          DS    BL1           MY FLAG BYTE (unnamed)               *
.* FLAG1    DF    B'00000001'                                        *
.* FLAG2    DF    B'00000010'                                        *
.* FLAG3    DF    B'00000100'                                        *
.* FLAG4    DF    B'00001000'                                        *
.* FLAG5    DF    B'00010000'                                        *
.* FLAG6    DF    B'00100000'                                        *
.* FLAG7    DF    B'01000000'                                        *
.* FLAG8    DF    B'10000000'                                        *
.*                                                                   *
.* MYFLAG   DS    BL1           MY FLAG BYTE (named)                 *
.* FLAG1    DF    B'00000001',MYFLAG                                 *
.* FLAG2    DF    B'00000010',MYFLAG                                 *
.* FLAG3    DF    B'00000100',MYFLAG                                 *
.* FLAG4    DF    B'00001000',MYFLAG                                 *
.* FLAG5    DF    B'00010000',MYFLAG                                 *
.* FLAG6    DF    B'00100000',MYFLAG                                 *
.* FLAG7    DF    B'01000000',MYFLAG                                 *
.* FLAG8    DF    B'10000000',MYFLAG                                 *
.*                                                                   *
.* NOTE:  As a special situation,  if the flag byte is only one byte *
.* in length,  then even if it has a  name you do not have to supply *
.* that name to this macro.   This is because the generated bit mask *
.* points to the relative location of the previous byte by default.  *
.*        Conversely,  as another  special  situation,  a named flag *
.* byte does not *have* to be defined *before* the use of this macro *
.* -- as long as the name of the flag byte *is* supplied here.       *
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
.BEGIN   ANOP
         AIF   (T'&FLAG NE 'O').GEN_IT
         MNOTE 12,'FLAG NAME IS MISSING'
         MEXIT
.GEN_IT  ANOP
         AIF   (T'&BASE NE 'O').BASE
&FLAG    EQU   *-1,&MASK,C'm'               DEFINE FLAG BIT(s)
         AGO   .EXIT
.BASE    ANOP
&FLAG    EQU   &BASE,&MASK,C'm'             DEFINE FLAG BIT(s)
.EXIT    ANOP
         MEND
